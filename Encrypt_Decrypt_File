/*
AES Base64 Encrypt File and Decryption File
Author: Tyrell Jones
Date: 10/28/2022
*/

#include <iostream>
#include "openssl/applink.c" 
#include <openssl/evp.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/bio.h>
#include <openssl/x509.h>
#include <openssl/hmac.h>
#include <fstream>
#include <vector>
#include <fstream>
#include <openssl/rand.h>
#include <string>

static const std::string kBase64String =
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"abcdefghijklmnopqrstuvwxyz"
"0123456789+/";

struct Base64DecTable
{
    signed char n[256];

    Base64DecTable()
    {
        for (int i = 0; i < 256; ++i)
        {
            n[i] = -1;
        }
        for (unsigned char i = '0'; i <= '9'; ++i)
        {
            n[i] = 52 + i - '0';
        }
        for (unsigned char i = 'A'; i <= 'Z'; ++i)
        {
            n[i] = i - 'A';
        }
        for (unsigned char i = 'a'; i <= 'z'; ++i)
        {
            n[i] = 26 + i - 'a';
        }
        n['+'] = 62;
        n['/'] = 63;
    }
    int operator [] (unsigned char i) const { return n[i]; }
};

size_t calcDecodeLength(char* b64input) {
    size_t len = strlen(b64input), padding = 0;

    if (b64input[len - 1] == '=' && b64input[len - 2] == '=') //last two chars are =
        padding = 2;
    else if (b64input[len - 1] == '=') //last char is =
        padding = 1;

    return (len * 3) / 4 - padding;
}

size_t base64DecodeToData(const std::string& sourceString, void* destinationPointer, size_t destinationSize)
{
    static const Base64DecTable b64table;
    if (!destinationSize)
    {
        return 0;
    }
    const size_t length = sourceString.length();
    int bc = 0, a = 0;
    char* const startPointer = static_cast<char*>(destinationPointer);
    char* pd = startPointer;
    char* const pend = pd + destinationSize;
    for (size_t i = 0; i < length; ++i)
    {
        const int n = b64table[sourceString[i]];
        if (n == -1)
        {
            continue;
        }
        a |= (n & 63) << (18 - bc);
        if ((bc += 6) > 18)
        {
            *pd = a >> 16;
            if (++pd >= pend)
            {
                return pd - startPointer;
            }
            *pd = a >> 8;
            if (++pd >= pend)
            {
                return pd - startPointer;
            }
            *pd = a;
            if (++pd >= pend)
            {
                return pd - startPointer;
            }
            bc = a = 0;
        }
    }
    if (bc >= 8)
    {
        *pd = a >> 16;
        if (++pd >= pend)
        {
            return pd - startPointer;
        }
        if (bc >= 16)
        {
            *(pd++) = a >> 8;
        }
    }
    return pd - startPointer;
}

std::string base64Encode(unsigned char const* bytesToEncodeChar, unsigned int inLength)
{
    std::string returnString;
    int i = 0;
    int j = 0;
    unsigned char characterArray3[3];
    unsigned char charArray4[4];

    while (inLength--)
    {
        characterArray3[i++] = *(bytesToEncodeChar++);
        if (i == 3)
        {
            charArray4[0] = (characterArray3[0] & 0xfc) >> 2;
            charArray4[1] = ((characterArray3[0] & 0x03) << 4) + ((characterArray3[1] & 0xf0) >> 4);
            charArray4[2] = ((characterArray3[1] & 0x0f) << 2) + ((characterArray3[2] & 0xc0) >> 6);
            charArray4[3] = characterArray3[2] & 0x3f;

            for (i = 0; (i < 4); i++)
            {
                returnString += kBase64String[charArray4[i]];
            }
            i = 0;
        }
    }

    if (i)
    {
        for (j = i; j < 3; j++)
        {
            characterArray3[j] = '\0';
        }

        charArray4[0] = (characterArray3[0] & 0xfc) >> 2;
        charArray4[1] = ((characterArray3[0] & 0x03) << 4) + ((characterArray3[1] & 0xf0) >> 4);
        charArray4[2] = ((characterArray3[1] & 0x0f) << 2) + ((characterArray3[2] & 0xc0) >> 6);
        charArray4[3] = characterArray3[2] & 0x3f;

        for (j = 0; (j < i + 1); j++)
        {
            returnString += kBase64String[charArray4[j]];
        }

        while ((i++ < 3))
        {
            returnString += '=';
        }

    }

    return returnString;

}

void _handleErrors(void)
{
    ERR_print_errors_fp(stderr);
    abort();
}

std::string readFile(std::string fileName) {
	std::string mystring;
	std::ifstream myfile(fileName);
	if (myfile.is_open()) { // always check whether the file is open
		myfile >> mystring; // pipe file's content into stream
	}

	return mystring;
}

std::string fileReader(std::string fileName) {


    // Create a text string, which is used to output the text file
    std::string encString;

    // Read from the text file
    std::ifstream encFile;

    encFile.open(fileName);

    std::string file_contents;
    if (encFile) {
        // Use a while loop together with the getline() function to read the file line by line
        while (getline(encFile, encString)) {
            // Output the text from the file
            file_contents += encString;
            file_contents.push_back('\n');

        }

        return file_contents;

    }

}

void writeFile(std::string input, std::string fileName) {
    std::ofstream out(fileName);
    out << input;
}

int _encrypt(unsigned char* plainTextChar, int plainTextLength, unsigned char* keyChar, unsigned char* ivChar, unsigned char* cipherTextChar)
{
    EVP_CIPHER_CTX* cipherContext;
    int length;
    int cipherTextLength;

    if (!(cipherContext = EVP_CIPHER_CTX_new()))
    {
        _handleErrors();
    }
    EVP_CIPHER_CTX_init(cipherContext);

    if (1 != EVP_EncryptInit_ex(cipherContext, EVP_aes_256_cbc(), NULL, keyChar, ivChar))
    {
        _handleErrors();
    }

    if (1 != EVP_EncryptUpdate(cipherContext, cipherTextChar, &length, plainTextChar, plainTextLength))
    {
        _handleErrors();
    }

    cipherTextLength = length;

    if (1 != EVP_EncryptFinal_ex(cipherContext, cipherTextChar + length, &length))
    {
        _handleErrors();
    }

    cipherTextLength += length;

    EVP_CIPHER_CTX_cleanup(cipherContext);
    EVP_CIPHER_CTX_free(cipherContext);
   
    return cipherTextLength;
}

int _decrypt(unsigned char* cipherTextChar, int cipherTextLength, unsigned char* keyChar, unsigned char* ivChar, unsigned char* plainTextChar)
{
    EVP_CIPHER_CTX* cipherContext;
    int length;
    int plainTextLength;

    if (!(cipherContext = EVP_CIPHER_CTX_new()))
    {
        _handleErrors();
    }
    EVP_CIPHER_CTX_init(cipherContext);

    if (1 != EVP_DecryptInit_ex(cipherContext, EVP_aes_256_cbc(), NULL, keyChar, ivChar))
    {
        _handleErrors();
    }

    if (1 != EVP_DecryptUpdate(cipherContext, plainTextChar, &length, cipherTextChar, cipherTextLength))
    {
        _handleErrors();
    }
    plainTextLength = length;


    if (1 != EVP_DecryptFinal_ex(cipherContext, plainTextChar + length, &length))
    {
        _handleErrors();
    }
    plainTextLength += length;

    EVP_CIPHER_CTX_cleanup(cipherContext);
    EVP_CIPHER_CTX_free(cipherContext);

    return plainTextLength;
}

/*
File Encryption
*/


int encryptFile(std::string inputFile, std::string outputFile,  unsigned char* password) {

    ERR_load_crypto_strings();
    OpenSSL_add_all_algorithms();

    size_t i;

    //Get File Using Input File name
    std::string cipherText = fileReader(inputFile) + "\n";


    //Convert File String to a character Array and Plaintext and set array length
    char* arr = new char[cipherText.length() + 1];
    strcpy(arr, cipherText.c_str());
    unsigned char* plainTextChar = (unsigned char*)arr;

    // Set Password usign input password
    const unsigned char passwordChar = (unsigned char)password;
    
    //Initiate Salt for encryption
    unsigned char saltChar[8];
    RAND_bytes(saltChar, 8);

    //Initiate Key and IV for encryption
    unsigned char  keyChar[32];
    unsigned char ivChar[32]; 

    //Create Vector to hold Salted Encryption
    std::vector<unsigned char> saltedVector;

    //Assigned Salted Tag to encryption
    unsigned char* Salted__ = (unsigned char*)"Salted__";

    for (i = 0; i < 8; i++)
    {
        saltedVector.push_back(Salted__[i]);
    }

    //Add salt to Salted Encryption Cipher
    for (i = 0; i < sizeof(saltChar); i++)
    {
        saltedVector.push_back(saltChar[i]);
    }

    //Create Buffer for Cipher
    char* cipherTextChar = new char[cipherText.length() + 1];
    int cipherTextLength;

    // EVO bytes to Key Generates a KEY and IV from the password Given, Used on encrypt and decrypt to recover IV and Key
    EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha1(), saltChar, (unsigned char*)password, strlen((char*)(unsigned char*)password), 1, keyChar, ivChar);

    //Encrypt PlainText
    cipherTextLength = _encrypt(plainTextChar, strlen((const char*)plainTextChar), keyChar, ivChar, (unsigned char*)cipherTextChar);

    //Add Cipher to salted Vector
    for (i = 0; i < cipherTextLength; i++) {
        saltedVector.push_back(cipherTextChar[i]);
    }

    //Convert Salted Vector to a unsigned char 
    unsigned char* saltedChar_array = saltedVector.data();

    //Base64 Encode string due to non printable character being generated in the cipher. 
    std::string base64EncryptedString_salt = base64Encode((unsigned char*)saltedChar_array, cipherTextLength + 16);


    //Write Base64 Encoded Encryption to File
    writeFile(
        base64EncryptedString_salt,
        outputFile
    );

    return 1;
}

/*
File Decryption
*/

int decryptFile(std::string inputFile, std::string outputFile, unsigned char* password) {

    //Read Encrypted String From File
    std::string returnEnc = readFile(inputFile);

    //Create Buffer to store Decrypted Text
    char* decryptedTextChar = new char[returnEnc.length() + 1];

    //Create Buffer to store Cipher Text read from File
    char* cipherText_buf = new char[returnEnc.length() + 1];

    int decryptedTextLength;

    //Convert retured base64 encoded encryption from File
    const char* str = returnEnc.c_str();

    //Create a cipher text buffer length 
    int cipherText_Buf_len = calcDecodeLength((char*)str);


    //Now convert the Base64 string back to cipher data
    base64DecodeToData(returnEnc, cipherText_buf, strlen((char*)cipherText_buf));

    //initate Key, IV, and Salt variables 
    unsigned char key[32];
    unsigned char iv[32];
    unsigned char salt[8];

    //Check for Salt Tag
    if (strncmp((const char*)cipherText_buf, "Salted__", 8) == 0) {
        memcpy(salt, cipherText_buf + 8, 8);
        EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha1(), salt, (unsigned char*)password, strlen((char*)(unsigned char*)password), 1, key, iv);

        //Decrypt If salt tag found, increase the cipherText Buffer by 16 bytes and decrease the cipherText_Buf_len by 16 bytes. 
        decryptedTextLength = _decrypt((unsigned char*)cipherText_buf + 16, cipherText_Buf_len - 16, key, iv, (unsigned char*)decryptedTextChar);
    }
    else {
        memcpy(salt, cipherText_buf + 8, 8);
        EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha1(), salt, (unsigned char*)password, strlen((char*)(unsigned char*)password), 1, key, iv);

        decryptedTextLength = _decrypt((unsigned char*)cipherText_buf, cipherText_Buf_len, key, iv, (unsigned char*)decryptedTextChar);
    }


    //Add a NULL terminator to be compliant with printable text
    decryptedTextChar[decryptedTextLength] = '\0';

    // Wrap in string
    std::string decryptedString((char*)decryptedTextChar, decryptedTextLength);

    //Write File to output file provided
    writeFile(decryptedString, outputFile);

    //Clean
    EVP_cleanup();
    ERR_free_strings();
    CONF_modules_free();
    return 1;
}


int main() {
    if (encryptFile("uses.txt", "encrypt.txt", (unsigned char*)"123abc") <= 0) {
        std::cerr << "Encryption Error";
    };

    if (decryptFile("encrypt.txt","dec.txt",  (unsigned char*)"123abc") <= 0) {
        std::cerr << "Decryption Error";
    };
}
