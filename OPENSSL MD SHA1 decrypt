#include <openssl/ssl.h>
#include <openssl/err.h>
#include <string.h>
#include <iostream>
#include "openssl/applink.c" 
#include <iostream>
#include <fstream>
#include <string>
#include <vector> 

// https://eclipsesource.com/blogs/2017/01/17/tutorial-aes-encryption-and-decryption-with-openssl/

#define bzero(b,len) (memset((b), '\0', (len)), (void) 0)  


void handleOpenSSLErrors(void)
{
    ERR_print_errors_fp(stderr);
    abort();
}


std::string decrypt(unsigned char* ciphertext, int ciphertext_len, unsigned char* key,
    unsigned char* iv) {

    EVP_CIPHER_CTX* ctx;
    unsigned char* plaintexts;
    int len;
    int plaintext_len;
    unsigned char* plaintext = new unsigned char[ciphertext_len];
    bzero(plaintext, ciphertext_len);

    /* Create and initialise the context */
    if (!(ctx = EVP_CIPHER_CTX_new())) handleOpenSSLErrors();

    /* Initialise the decryption operation. IMPORTANT - ensure you use a key
     * and IV size appropriate for your cipher
     * In this example we are using 256 bit AES (i.e. a 256 bit key). The
     * IV size for *most* modes is the same as the block size. For AES this
     * is 128 bits */
    if (1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv))
        handleOpenSSLErrors();

    EVP_CIPHER_CTX_set_key_length(ctx, EVP_MAX_KEY_LENGTH);

    /* Provide the message to be decrypted, and obtain the plaintext output.
      * EVP_DecryptUpdate can be called multiple times if necessary
      */
    if (1 != EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len))
        handleOpenSSLErrors();

    plaintext_len = len;

    /* Finalise the decryption. Further plaintext bytes may be written at
     * this stage.
     */
    if (1 != EVP_DecryptFinal_ex(ctx, plaintext + len, &len)) handleOpenSSLErrors();
    plaintext_len += len;


    /* Add the null terminator */
    plaintext[plaintext_len] = 0;

    /* Clean up */
    EVP_CIPHER_CTX_free(ctx);
    std::string ret = (char*)plaintext;
    delete[] plaintext;
    return ret;
}

void initAES(const std::string& pass, unsigned char* salt, unsigned char* key, unsigned char* iv)
{
    bzero(key, sizeof(key));
    bzero(iv, sizeof(iv));

    EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha1(), salt, (unsigned char*)pass.c_str(), pass.length(), 1, key, iv);
}

size_t calcDecodeLength(char* b64input) {
    size_t len = strlen(b64input), padding = 0;

    if (b64input[len - 1] == '=' && b64input[len - 2] == '=') //last two chars are =
        padding = 2;
    else if (b64input[len - 1] == '=') //last char is =
        padding = 1;
    return (len * 3) / 4 - padding;
}

void Base64Decode(char* b64message, unsigned char** buffer, size_t* length) {
    BIO* bio, * b64;

    int decodeLen = calcDecodeLength(b64message);
    *buffer = (unsigned char*)malloc(decodeLen + 1);
    (*buffer)[decodeLen] = '\0';

    bio = BIO_new_mem_buf(b64message, -1);
    b64 = BIO_new(BIO_f_base64());
    bio = BIO_push(b64, bio);

    //BIO_set_flags(bio, BIO_FLAGS_BASE64_NO_NL); //Do not use newlines to flush buffer
    *length = BIO_read(bio, *buffer, strlen(b64message));
    BIO_free_all(bio);
}

int getArray(std::string fileName) {


    // Create a text string, which is used to output the text file
    std::string encString;

    // Read from the text file
    std::ifstream encFile;

    encFile.open(fileName);


    if (encFile) {
        // Use a while loop together with the getline() function to read the file line by line
        while (getline(encFile, encString)) {
            // Output the text from the file

            char* arr = new char[encString.length() + 1];

            strcpy(arr, encString.c_str());
            std::cout << "String to char array conversion:\n";
            for (int i = 0; i < encString.length(); i++)
                std::cout << arr[i];


        }

        // Close the file
        encFile.close();

        return 1;
    }

}

std::string read_File(std::string fileName) {

    
    // Create a text string, which is used to output the text file
    std::string encString;

    // Read from the text file
    std::ifstream encFile;

    encFile.open(fileName);


    if (encFile) {
        // Use a while loop together with the getline() function to read the file line by line
        while (getline(encFile, encString)) {
            // Output the text from the file
            return encString;
        }

  

    }

}


int checkFile(std::string fileName) {


    // Create a text string, which is used to output the text file
    std::string encString;

    // Read from the text file
    std::ifstream encFile;

    encFile.open(fileName);


    if (encFile) {
        return 1;
    }

    else {

        return 0;
    }

}

int main(void)
{
    // This is the string Hello, World! encrypted using aes-256-cbc with the
    // pasword 12345

    //GET cipher text
    std::cout << "File to string conversion:\n";
    std::cout << "What file would you like to decrypt?" << std::endl;
    std::string file_toDecrypt;
    std::cin >> file_toDecrypt;
    std::string cipherText = read_File(file_toDecrypt) + "\n" ;
    std::cout << cipherText + "\n" << std::endl;

    //Convert Cipher textt to char arrar for decoding
    char* arr = new char[cipherText.length() + 1];
    strcpy(arr, cipherText.c_str());
    std::cout << "String to char array conversion:\n";
    std::cout << arr << std::endl;

    //set char array 
    char* ciphertext_base64 = (char*)arr;

    //Set Buffer Length
    int decryptedtext_len, ciphertext_len;

    size_t cipher_len;

    unsigned char* ciphertext;
    unsigned char salt[8];
    ERR_load_crypto_strings();
    std::cout << ciphertext_base64;
    Base64Decode(ciphertext_base64, &ciphertext, &cipher_len);

    unsigned char key[32];
    unsigned char iv[32];

    if (strncmp((const char*)ciphertext, "Salted__", 8) == 0) {
        memcpy(salt, &ciphertext[8], 8);
        ciphertext += 16;
        cipher_len -= 16;
    }
    std::cout << salt << std::endl;

    std::string decryptPassword;
    std::cout << "Enter Password to Decrypt File";
    std::cin >> decryptPassword;

    initAES(decryptPassword, salt, key, iv);

    std::string result = decrypt(ciphertext, cipher_len, key, iv);
    std::cout << result << std::endl;


    std::cout << "Name your output file" << std::endl;
    std::string inputFile;
    std::cin >> inputFile;
    std::ofstream out(inputFile);
    out << result;
    out.close();

    // Clean up
    EVP_cleanup();
    ERR_free_strings();

}
